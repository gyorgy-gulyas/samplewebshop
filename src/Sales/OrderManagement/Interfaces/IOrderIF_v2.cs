
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Sales.OrderManagement;
using ServiceKit.Net;

namespace Sales.OrderManagement
{
	public partial interface IOrderIF_v2
	{
		/// <return>OrderDTO</return>
		public Task<Response<OrderDTO>> getOrder(CallingContext ctx, string orderId);

		/// <return>OrderDTO</return>
		public Task<Response<OrderDTO>> placeOrder(CallingContext ctx, OrderDTO order);

		public Task<Response> justOrder(CallingContext ctx, string orderId);


		public partial class OrderPlaced_v1 : IEquatable<OrderPlaced_v1>
		{
			public string orderId { get; set; }

			#region Clone 
			public virtual OrderPlaced_v1 Clone()
			{
				OrderPlaced_v1 clone = new();

				clone.orderId = new string(orderId.ToCharArray());

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( OrderPlaced_v1 other )
			{
				if (other is null) return false;

				if(orderId != other.orderId) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as OrderPlaced_v1);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(orderId);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 
		}

		public partial class OrderPlaced_v2 : IEquatable<OrderPlaced_v2>
		{
			public string orderId { get; set; }

			#region Clone 
			public virtual OrderPlaced_v2 Clone()
			{
				OrderPlaced_v2 clone = new();

				clone.orderId = new string(orderId.ToCharArray());

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( OrderPlaced_v2 other )
			{
				if (other is null) return false;

				if(orderId != other.orderId) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as OrderPlaced_v2);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(orderId);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 
		}

		public enum OrderStatuses
		{
			Draft,
			Released,
			Finished,
			Canceled,
		}
		public partial class OrderItemDTO : IEquatable<OrderItemDTO>
		{
			public enum DeliveryStatuses
			{
				NotDelivered,
				PartiallyDelivered,
				Delivered,
			}
			public string productId { get; set; }
			public string productName { get; set; }
			public decimal quantity { get; set; }
			public decimal UnitPrice { get; set; }
			public string subTotalPrice { get; set; }
			public DeliveryStatuses deliveryStatus { get; set; }

			#region Clone 
			public virtual OrderItemDTO Clone()
			{
				OrderItemDTO clone = new();

				clone.productId = new string(productId.ToCharArray());
				clone.productName = new string(productName.ToCharArray());
				clone.quantity = quantity;
				clone.UnitPrice = UnitPrice;
				clone.subTotalPrice = new string(subTotalPrice.ToCharArray());
				clone.deliveryStatus = deliveryStatus;

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( OrderItemDTO other )
			{
				if (other is null) return false;

				if(productId != other.productId) return false;
				if(productName != other.productName) return false;
				if(quantity != other.quantity) return false;
				if(UnitPrice != other.UnitPrice) return false;
				if(subTotalPrice != other.subTotalPrice) return false;
				if(deliveryStatus != other.deliveryStatus) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as OrderItemDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(productId);
				hash.Add(productName);
				hash.Add(quantity);
				hash.Add(UnitPrice);
				hash.Add(subTotalPrice);
				hash.Add(deliveryStatus);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 
		}

		public partial class OrderDTO : IEquatable<OrderDTO>
		{
			public partial class CustomerDataDTO : IEquatable<CustomerDataDTO>
			{
				public string customerId { get; set; }
				public string customerName { get; set; }

				#region Clone 
				public virtual CustomerDataDTO Clone()
				{
					CustomerDataDTO clone = new();

					clone.customerId = new string(customerId.ToCharArray());
					clone.customerName = new string(customerName.ToCharArray());

					return clone;
				}
				#endregion Clone 

				#region Equals & HashCode 
				public bool Equals( CustomerDataDTO other )
				{
					if (other is null) return false;

					if(customerId != other.customerId) return false;
					if(customerName != other.customerName) return false;

					return true;
				}

				public override bool Equals(object obj) => Equals(obj as CustomerDataDTO);

				public override int GetHashCode()
				{
					var hash = new HashCode();
					hash.Add(customerId);
					hash.Add(customerName);

					return hash.ToHashCode();
				}
				#endregion Equals & HashCode 
			}

			public string orderingDate { get; set; }
			public OrderStatuses orderStatus { get; set; }
			public decimal totalPrice { get; set; }
			public CustomerDataDTO customerData { get; set; }
			public List<OrderItemDTO> items { get; set; } = new();

			#region Clone 
			public virtual OrderDTO Clone()
			{
				OrderDTO clone = new();

				clone.orderingDate = new string(orderingDate.ToCharArray());
				clone.orderStatus = orderStatus;
				clone.totalPrice = totalPrice;

				// clone of customerData
				clone.customerData = customerData?.Clone();

				// clone of items
				clone.items.AddRange( items.Select( v => v.Clone() ));

				return clone;
			}
			#endregion Clone 

			#region Equals & HashCode 
			public bool Equals( OrderDTO other )
			{
				if (other is null) return false;

				if(orderingDate != other.orderingDate) return false;
				if(orderStatus != other.orderStatus) return false;
				if(totalPrice != other.totalPrice) return false;

				// equals of customerData
				if(customerData == null && other.customerData != null ) return false;
				if(customerData != null && customerData.Equals(other.customerData) == false ) return false;

				// equals of items
				if(items.SequenceEqual(other.items) == false ) return false;

				return true;
			}

			public override bool Equals(object obj) => Equals(obj as OrderDTO);

			public override int GetHashCode()
			{
				var hash = new HashCode();
				hash.Add(orderingDate);
				hash.Add(orderStatus);
				hash.Add(totalPrice);

				// hash of customerData
				if(customerData != null ) hash.Add(customerData);

				// hash of items
				foreach( var element_items in items)
					hash.Add(element_items);

				return hash.ToHashCode();
			}
			#endregion Equals & HashCode 
		}

	}
}
