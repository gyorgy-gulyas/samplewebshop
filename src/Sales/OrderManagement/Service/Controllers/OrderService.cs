
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Sales.OrderManagement.Protos;
using Serilog.Context;
using ServiceKit.Net;

namespace Sales.OrderManagement
{
public class OrderServiceGrpcController : Sales.OrderManagement.Protos.OrderService.OrderServiceBase 
{
	private readonly ILogger<OrderServiceGrpcController> _logger;
	private readonly IOrderService _service;

	public OrderServiceGrpcController( ILogger<OrderServiceGrpcController> logger, IOrderService service )
	{
		_logger = logger; 
		_service = service; 
	}

	public override async Task<getOrderResponse> getOrder( getOrderRequest request, ServerCallContext grpcContext)
	{
		using(LogContext.PushProperty( "Scope", "OrderService.getOrder" ))
		{
			CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
			try
			{
				var response = await _service.getOrder(ctx, request.OrderId);
				
				if( response.HasValue1() == true )
				{
					return new getOrderResponse { Value1 = response.Value1 };
				}
				
				if( response.IsSuccess() == false )
				{
					return new getOrderResponse {
						Error = new () {
							Status = response.Error.Status.ToGrpc(),
							MessageText = response.Error.MessageText,
							AdditionalInformation = response.Error.AdditionalInformation
						}
					};
				}
				
				return new getOrderResponse {
					Error = new () {
						Status = ServiceKit.Protos.Statuses.NotImplemented,
						MessageText = "Not handled reponse in GRPC Controller when calling 'OrderService.getOrder'",
					}
				};
				
			}
			catch(Exception ex)
			{
				return new getOrderResponse {
					Error = new () {
						Status = ServiceKit.Protos.Statuses.InternalError,
						MessageText = ex.Message,
						AdditionalInformation = ex.ToString()
					}
				};
			}
			finally
			{
				ctx.ReturnToPool();
			}
		}
	}

	public override async Task<placeOrderResponse> placeOrder( placeOrderRequest request, ServerCallContext grpcContext)
	{
		using(LogContext.PushProperty( "Scope", "OrderService.placeOrder" ))
		{
			CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
			try
			{
				var response = await _service.placeOrder(ctx, request.Order);
				
				if( response.HasValue1() == true )
				{
					return new placeOrderResponse { Value1 = response.Value1 };
				}
				
				if( response.IsSuccess() == false )
				{
					return new placeOrderResponse {
						Error = new () {
							Status = response.Error.Status.ToGrpc(),
							MessageText = response.Error.MessageText,
							AdditionalInformation = response.Error.AdditionalInformation
						}
					};
				}
				
				return new placeOrderResponse {
					Error = new () {
						Status = ServiceKit.Protos.Statuses.NotImplemented,
						MessageText = "Not handled reponse in GRPC Controller when calling 'OrderService.placeOrder'",
					}
				};
				
			}
			catch(Exception ex)
			{
				return new placeOrderResponse {
					Error = new () {
						Status = ServiceKit.Protos.Statuses.InternalError,
						MessageText = ex.Message,
						AdditionalInformation = ex.ToString()
					}
				};
			}
			finally
			{
				ctx.ReturnToPool();
			}
		}
	}
}
}
