
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Sales.OrderManagement;
using Sales.OrderManagement.Protos.OrderIF_v2;
using Serilog.Context;
using ServiceKit.Net;

namespace Sales.OrderManagement
{
	public class OrderIF_v2_GrpcController : Sales.OrderManagement.Protos.OrderIF_v2.OrderIF_v2.OrderIF_v2Base 
	{
		private readonly ILogger<OrderIF_v2_GrpcController> _logger;
		private readonly IOrderIF_v2 _service;

		public OrderIF_v2_GrpcController( ILogger<OrderIF_v2_GrpcController> logger, IOrderIF_v2 service )
		{
			_logger = logger; 
			_service = service; 
		}

		public override async Task<OrderIF_v2_getOrderResponse> getOrder( OrderIF_v2_getOrderRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "OrderIF_v2.getOrder" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					string orderId;
					orderId = request.OrderId;

					// calling the service function itself
					var response = await _service.getOrder( ctx , orderId );

					if( response.HasValue1() == true )
					{
						var result = new OrderIF_v2_getOrderResponse();
						result.Value1 = response.Value1 != null ? Sales.OrderManagement.IOrderIF_v2.OrderDTO.ToGrpc( response.Value1) : null;
						return result;
					}
					
					if( response.IsSuccess() == false )
					{
						return new OrderIF_v2_getOrderResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
					
					return new OrderIF_v2_getOrderResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.NotImplemented,
							MessageText = "Not handled reponse in GRPC Controller when calling 'OrderIF_v2.getOrder'",
						}
					};
					
				}
				catch(Exception ex)
				{
					return new OrderIF_v2_getOrderResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public override async Task<OrderIF_v2_placeOrderResponse> placeOrder( OrderIF_v2_placeOrderRequest request, ServerCallContext grpcContext)
		{
			using(LogContext.PushProperty( "Scope", "OrderIF_v2.placeOrder" ))
			{
				CallingContext ctx = CallingContext.PoolFromGrpcContext( grpcContext, _logger );
				try
				{
					Sales.OrderManagement.IOrderIF_v2.OrderDTO order;
					order = request.Order != null ? Sales.OrderManagement.IOrderIF_v2.OrderDTO.FromGrpc( request.Order) : null;

					// calling the service function itself
					var response = await _service.placeOrder( ctx , order );

					if( response.HasValue1() == true )
					{
						var result = new OrderIF_v2_placeOrderResponse();
						result.Value1 = response.Value1 != null ? Sales.OrderManagement.IOrderIF_v2.OrderDTO.ToGrpc( response.Value1) : null;
						return result;
					}
					
					if( response.IsSuccess() == false )
					{
						return new OrderIF_v2_placeOrderResponse {
							Error = new () {
								Status = response.Error.Status.ToGrpc(),
								MessageText = response.Error.MessageText,
								AdditionalInformation = response.Error.AdditionalInformation
							}
						};
					}
					
					return new OrderIF_v2_placeOrderResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.NotImplemented,
							MessageText = "Not handled reponse in GRPC Controller when calling 'OrderIF_v2.placeOrder'",
						}
					};
					
				}
				catch(Exception ex)
				{
					return new OrderIF_v2_placeOrderResponse {
						Error = new () {
							Status = ServiceKit.Protos.Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString()
						}
					};
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}
	}
}
