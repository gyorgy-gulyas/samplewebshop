
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.RateLimiting;
using Sales.OrderManagement;
using Serilog.Context;
using ServiceKit.Net;

namespace Sales.OrderManagement
{
	public class OrderIF_v1_RestController : ControllerBase 
	{
		private readonly ILogger<OrderIF_v1_RestController> _logger;
		private readonly IOrderIF_v1 _service;
		public OrderIF_v1_RestController( ILogger<OrderIF_v1_RestController> logger, IOrderIF_v1 service )
		{
			_logger = logger; 
			_service = service; 
		}

		public async Task<IActionResult> getOrder(string orderId)
		{
			using(LogContext.PushProperty( "Scope", "OrderIF_v1.getOrder" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.getOrder( ctx , orderId );

					if( response.IsSuccess() == true )
						 return Ok(response);
					 else
						 return BadRequest(response);
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new { message = ex.Message });
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public async Task<IActionResult> placeOrder(Sales.OrderManagement.IOrderIF_v1.OrderDTO order)
		{
			using(LogContext.PushProperty( "Scope", "OrderIF_v1.placeOrder" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.placeOrder( ctx , order );

					if( response.IsSuccess() == true )
						 return Ok(response);
					 else
						 return BadRequest(response);
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new { message = ex.Message });
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		public async Task<IActionResult> justOrder(string orderId)
		{
			using(LogContext.PushProperty( "Scope", "OrderIF_v1.justOrder" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.justOrder( ctx , orderId );

					if( response.IsSuccess() == true )
						 return Ok(response);
					 else
						 return BadRequest(response);
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new { message = ex.Message });
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}
	}
}
