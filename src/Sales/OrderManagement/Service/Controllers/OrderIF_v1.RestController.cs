
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.RateLimiting;
using Sales.OrderManagement;
using Serilog.Context;
using ServiceKit.Net;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.Swagger;
using System.Net.Mime;
using System.Text.Json;

namespace Sales.OrderManagement
{
	/// public interface for Orders
	/// only for service-service communication
	[ApiController]
	[Route( "sales/ordermanagement/orderif/v1" )]
	[SwaggerTag( "public interface for Orders only for service-service communication" )]
	public class OrderIF_v1_RestController : ControllerBase 
	{
		private readonly ILogger<OrderIF_v1_RestController> _logger;
		private readonly IOrderIF_v1 _service;
		public OrderIF_v1_RestController( ILogger<OrderIF_v1_RestController> logger, IOrderIF_v1 service )
		{
			_logger = logger; 
			_service = service; 
		}

		[HttpPost( "None" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IOrderIF_v1.OrderItemDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> setPrice( [FromBody] IOrderIF_v1.OrderItemDTO orderItem,  [FromQuery] decimal price)
		{
			using(LogContext.PushProperty( "Scope", "OrderIF_v1.setPrice" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.setPrice( ctx, orderItem, price );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'OrderIF_v1.setPrice'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "None" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[Consumes( "multipart/form-data" )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IOrderIF_v1.OrderDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> multiPart( [FromForm] IFormFile _json_order,  [FromForm] IFormFile _json_orderitem)
		{
			using(LogContext.PushProperty( "Scope", "OrderIF_v1.multiPart" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					string json_order = await new StreamReader( _json_order.OpenReadStream() ).ReadToEndAsync();
					IOrderIF_v1.OrderDTO order = JsonSerializer.Deserialize<IOrderIF_v1.OrderDTO>( json_order );

					string json_orderitem = await new StreamReader( _json_orderitem.OpenReadStream() ).ReadToEndAsync();
					IOrderIF_v1.OrderItemDTO orderitem = JsonSerializer.Deserialize<IOrderIF_v1.OrderItemDTO>( json_orderitem );

					// calling the service function itself
					var response = await _service.multiPart( ctx, order, orderitem );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'OrderIF_v1.multiPart'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		///getting the order based on id
		[HttpGet( "getorder/{orderId}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerOperation( "getting the order based on id" )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IOrderIF_v1.OrderDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> getOrder( [FromRoute] string orderId)
		{
			using(LogContext.PushProperty( "Scope", "OrderIF_v1.getOrder" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.getOrder( ctx, orderId );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'OrderIF_v1.getOrder'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "None" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "", typeof(IOrderIF_v1.OrderDTO) )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> placeOrder( [FromBody] IOrderIF_v1.OrderDTO order)
		{
			using(LogContext.PushProperty( "Scope", "OrderIF_v1.placeOrder" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.placeOrder( ctx, order );

					if( response.IsSuccess() == true )
					{
						if( response.HasValue() == true )
						{
							return Ok(response.Value);
						}
						else
						{
							return StatusCode(StatusCodes.Status501NotImplemented, "Not handled reponse in REST Controller when calling 'OrderIF_v1.placeOrder'" );
						}
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}

		[HttpPost( "justorder/{orderId}" )] 
		[Produces( MediaTypeNames.Application.Json )]
		[SwaggerResponse( StatusCodes.Status200OK, "Ok" )]
		[SwaggerResponse( StatusCodes.Status400BadRequest, nameof(StatusCodes.Status400BadRequest), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status408RequestTimeout, nameof(StatusCodes.Status408RequestTimeout), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status404NotFound, nameof(StatusCodes.Status404NotFound), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status401Unauthorized, nameof(StatusCodes.Status401Unauthorized), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status501NotImplemented, nameof(StatusCodes.Status501NotImplemented), typeof(ServiceKit.Net.Error) )]
		[SwaggerResponse( StatusCodes.Status500InternalServerError, nameof(StatusCodes.Status500InternalServerError), typeof(ServiceKit.Net.Error) )]
		public async Task<IActionResult> justOrder( [FromRoute] string orderId)
		{
			using(LogContext.PushProperty( "Scope", "OrderIF_v1.justOrder" ))
			{
				CallingContext ctx = CallingContext.PoolFromHttpContext( HttpContext, _logger );
				try
				{
					// calling the service function itself
					var response = await _service.justOrder( ctx, orderId );

					if( response.IsSuccess() == true )
					{
						return Ok();
					}
					else
					{
						return StatusCode(response.Error.Status.ToHttp(), response.Error);
					}
				}
				catch(Exception ex)
				{
					return StatusCode(StatusCodes.Status500InternalServerError, new Error() { Status = Statuses.InternalError, MessageText = ex.Message, AdditionalInformation = ex.ToString()} );
				}
				finally
				{
					ctx.ReturnToPool();
				}
			}
		}
	}
}
