
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Grpc.Net.Client;
using Sales.OrderManagement;
using Sales.OrderManagement.Protos.OrderIF_v2;
using ServiceKit.Net;

namespace Sales.OrderManagement
{
	public class OrderIF_v2_GrpcClient : IOrderIF_v2 
	{
		private readonly GrpcChannel _channel;
		private readonly OrderIF_v2.OrderIF_v2Client _client;

		OrderIF_v2_GrpcClient( string serverAddress )
		{
			_channel = GrpcChannel.ForAddress(serverAddress);
			_client = new OrderIF_v2.OrderIF_v2Client(_channel);
		}

		/// <inheritdoc />
		async Task<Response<IOrderIF_v2.OrderDTO>> IOrderIF_v2.getOrder(CallingContext ctx, string orderId)
		{
			try
			{
				// fill grpc request
				var request = new OrderIF_v2_getOrderRequest();
				request.OrderId = orderId;

				// calling grpc client
				var grpc_response = await _client.getOrderAsync( request, new CallOptions(ctx.ToGrpcMetadata( "SalesOrderManagementOrderIF_v2", "getOrder" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case OrderIF_v2_getOrderResponse.ResultOneofCase.Value:
						IOrderIF_v2.OrderDTO value;
						value = grpc_response.Value != null ? IOrderIF_v2.OrderDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IOrderIF_v2.OrderDTO>.Success( value );

					case OrderIF_v2_getOrderResponse.ResultOneofCase.Error:
						return Response<IOrderIF_v2.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case OrderIF_v2_getOrderResponse.ResultOneofCase.None:
					default:
						return Response<IOrderIF_v2.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'OrderIF_v2_getOrder'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IOrderIF_v2.OrderDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IOrderIF_v2.OrderDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IOrderIF_v2.OrderDTO>> IOrderIF_v2.placeOrder(CallingContext ctx, IOrderIF_v2.OrderDTO order)
		{
			try
			{
				// fill grpc request
				var request = new OrderIF_v2_placeOrderRequest();
				request.Order = order != null ? IOrderIF_v2.OrderDTO.ToGrpc( order ) : null;

				// calling grpc client
				var grpc_response = await _client.placeOrderAsync( request, new CallOptions(ctx.ToGrpcMetadata( "SalesOrderManagementOrderIF_v2", "placeOrder" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case OrderIF_v2_placeOrderResponse.ResultOneofCase.Value:
						IOrderIF_v2.OrderDTO value;
						value = grpc_response.Value != null ? IOrderIF_v2.OrderDTO.FromGrpc( grpc_response.Value ) : null;
						return Response<IOrderIF_v2.OrderDTO>.Success( value );

					case OrderIF_v2_placeOrderResponse.ResultOneofCase.Error:
						return Response<IOrderIF_v2.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case OrderIF_v2_placeOrderResponse.ResultOneofCase.None:
					default:
						return Response<IOrderIF_v2.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'OrderIF_v2_placeOrder'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response<IOrderIF_v2.OrderDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IOrderIF_v2.OrderDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response> IOrderIF_v2.justOrder(CallingContext ctx, string orderId)
		{
			try
			{
				// fill grpc request
				var request = new OrderIF_v2_justOrderRequest();
				request.OrderId = orderId;

				// calling grpc client
				var grpc_response = await _client.justOrderAsync( request, new CallOptions(ctx.ToGrpcMetadata( "SalesOrderManagementOrderIF_v2", "justOrder" ))).ResponseAsync;

				// fill response
				switch( grpc_response.ResultCase )
				{
					case OrderIF_v2_justOrderResponse.ResultOneofCase.Success:
						return Response.Success();

					case OrderIF_v2_justOrderResponse.ResultOneofCase.Error:
						return Response.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = grpc_response.Error.MessageText,
							AdditionalInformation = grpc_response.Error.AdditionalInformation,
						} );

					case OrderIF_v2_justOrderResponse.ResultOneofCase.None:
					default:
						return Response.Failure( new ServiceKit.Net.Error() {
							Status = grpc_response.Error.Status.FromGrpc(),
							MessageText = "Not handled reponse in GRPC client when calling 'OrderIF_v2_justOrder'",
						} );
				}
			}
			catch (RpcException ex)
			{
				return Response.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.FromGrpc(),
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

	}
}
