
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Sales.OrderManagement;
using ServiceKit.Net;
using System.Globalization;
using System.Net;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;

namespace Sales.OrderManagement
{
	/// public interface for Orders
	/// only for service-service communication
	public class OrderIF_v1_RestClient : IOrderIF_v1 
	{
		private readonly HttpClient _httpClient;

		OrderIF_v1_RestClient( string serverAddress )
		{
			_httpClient = new HttpClient();
			_httpClient.BaseAddress = new Uri( serverAddress );
			_httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
		}

		/// <inheritdoc />
		async Task<Response<IOrderIF_v1.OrderItemDTO>> IOrderIF_v1.setPrice(CallingContext ctx, IOrderIF_v1.OrderItemDTO orderItem, decimal price)
		{
			try
			{
				_httpClient.DefaultRequestHeaders.Remove("x-request-id");
				_httpClient.DefaultRequestHeaders.Add("x-request-id", Guid.NewGuid().ToString());

				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/sales/ordermanagement/orderif/v1/setprice?{price}={price.ToString(CultureInfo.InvariantCulture)}" ) );
				ctx.FillHttpRequest( request, "SalesOrderManagementOrderIF_v1", "setPrice" );

				// build content
				request.Content = new StringContent( JsonSerializer.Serialize<IOrderIF_v1.OrderItemDTO>( orderItem ));

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IOrderIF_v1.OrderItemDTO>();
					return Response<IOrderIF_v1.OrderItemDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IOrderIF_v1.OrderItemDTO>.Failure( error );
				}
				else
				{
					return Response<IOrderIF_v1.OrderItemDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in GRPC client when calling 'OrderIF_v1_setPrice'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IOrderIF_v1.OrderItemDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IOrderIF_v1.OrderItemDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IOrderIF_v1.OrderDTO>> IOrderIF_v1.multiPart(CallingContext ctx, IOrderIF_v1.OrderDTO order, IOrderIF_v1.OrderItemDTO orderitem)
		{
			try
			{
				_httpClient.DefaultRequestHeaders.Remove("x-request-id");
				_httpClient.DefaultRequestHeaders.Add("x-request-id", Guid.NewGuid().ToString());

				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/sales/ordermanagement/orderif/v1/multipart" ) );
				ctx.FillHttpRequest( request, "SalesOrderManagementOrderIF_v1", "multiPart" );

				// build multi part content
				MultipartFormDataContent multipartContent = new();
				multipartContent.Add( new StringContent( JsonSerializer.Serialize<IOrderIF_v1.OrderDTO>( order ), Encoding.UTF8, "application/json" ), "_json_order", "_json_order.json" );
				multipartContent.Add( new StringContent( JsonSerializer.Serialize<IOrderIF_v1.OrderItemDTO>( orderitem ), Encoding.UTF8, "application/json" ), "_json_orderitem", "_json_orderitem.json" );
				request.Content = multipartContent;

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IOrderIF_v1.OrderDTO>();
					return Response<IOrderIF_v1.OrderDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IOrderIF_v1.OrderDTO>.Failure( error );
				}
				else
				{
					return Response<IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in GRPC client when calling 'OrderIF_v1_multiPart'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IOrderIF_v1.OrderDTO>> IOrderIF_v1.getOrder(CallingContext ctx, string orderId)
		{
			try
			{
				_httpClient.DefaultRequestHeaders.Remove("x-request-id");
				_httpClient.DefaultRequestHeaders.Add("x-request-id", Guid.NewGuid().ToString());

				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Get, WebUtility.UrlEncode( $"/sales/ordermanagement/orderif/v1/getorder/{orderId}" ) );
				ctx.FillHttpRequest( request, "SalesOrderManagementOrderIF_v1", "getOrder" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IOrderIF_v1.OrderDTO>();
					return Response<IOrderIF_v1.OrderDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IOrderIF_v1.OrderDTO>.Failure( error );
				}
				else
				{
					return Response<IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in GRPC client when calling 'OrderIF_v1_getOrder'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response<IOrderIF_v1.OrderDTO>> IOrderIF_v1.placeOrder(CallingContext ctx, IOrderIF_v1.OrderDTO order)
		{
			try
			{
				_httpClient.DefaultRequestHeaders.Remove("x-request-id");
				_httpClient.DefaultRequestHeaders.Add("x-request-id", Guid.NewGuid().ToString());

				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/sales/ordermanagement/orderif/v1/placeorder" ) );
				ctx.FillHttpRequest( request, "SalesOrderManagementOrderIF_v1", "placeOrder" );

				// build content
				request.Content = new StringContent( JsonSerializer.Serialize<IOrderIF_v1.OrderDTO>( order ));

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					var value = await response.Content.ReadFromJsonAsync<IOrderIF_v1.OrderDTO>();
					return Response<IOrderIF_v1.OrderDTO>.Success( value );
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response<IOrderIF_v1.OrderDTO>.Failure( error );
				}
				else
				{
					return Response<IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in GRPC client when calling 'OrderIF_v1_placeOrder'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response<IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response<IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

		/// <inheritdoc />
		async Task<Response> IOrderIF_v1.justOrder(CallingContext ctx, string orderId)
		{
			try
			{
				_httpClient.DefaultRequestHeaders.Remove("x-request-id");
				_httpClient.DefaultRequestHeaders.Add("x-request-id", Guid.NewGuid().ToString());

				// build request
				HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/sales/ordermanagement/orderif/v1/justorder/{orderId}" ) );
				ctx.FillHttpRequest( request, "SalesOrderManagementOrderIF_v1", "justOrder" );

				// call http client 
				HttpResponseMessage response = await _httpClient.SendAsync( request );

				if (response.IsSuccessStatusCode)
				{
					return Response.Success();
				}
				else if( response.Content != null )
				{
					var error = await response.Content.ReadFromJsonAsync<Error>();
					return Response.Failure( error );
				}
				else
				{
					return Response.Failure( new ServiceKit.Net.Error() {
						Status = response.StatusCode.FromHttp(),
						MessageText = "Not handled reponse in GRPC client when calling 'OrderIF_v1_justOrder'",
					} );
				}
			}
			catch (HttpRequestException ex)
			{
				return Response.Failure( new ServiceKit.Net.Error() {
					Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
			catch (Exception ex)
			{
				return Response.Failure( new ServiceKit.Net.Error() {
					Status = Statuses.InternalError,
					MessageText = ex.Message,
					AdditionalInformation = ex.ToString(),
				} );
			}
		}

	}
}
