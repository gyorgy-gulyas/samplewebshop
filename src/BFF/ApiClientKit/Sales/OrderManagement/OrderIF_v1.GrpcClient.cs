
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using Grpc.Net.Client;
using Sales.OrderManagement;
using Sales.OrderManagement.Protos.OrderIF_v1;
using ServiceKit.Net;
using System.Globalization;

namespace BFF.ApiClientKit
{
	static class Grpc 
	{
		/// public interface for Orders
		/// only for service-service communication
		static class OrderIF
		{
			static class V1 
			{
				private static OrderIF_v1.OrderIF_v1Client _client;
				public static async Task<Response<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>> setPrice(Sales.OrderManagement.IOrderIF_v1.OrderItemDTO orderItem, decimal price)
				{
					try
					{
						// fill grpc request
						var request = new OrderIF_v1_setPriceRequest();
						request.OrderItem = orderItem != null ? Sales.OrderManagement.IOrderIF_v1.OrderItemDTO.ToGrpc( orderItem ) : null;
						request.Price = price.ToString(CultureInfo.InvariantCulture);

						// calling grpc client
						_client ??= new ProjectIF_v1.ProjectIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.setPriceAsync( request, new CallOptions(GrpClient.GetMetadata( "Sales.OrderManagement.OrderIF_v1.setPrice" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case OrderIF_v1_setPriceResponse.ResultOneofCase.Value:
								Sales.OrderManagement.IOrderIF_v1.OrderItemDTO value;
								value = grpc_response.Value != null ? Sales.OrderManagement.IOrderIF_v1.OrderItemDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>.Success( value );

							case OrderIF_v1_setPriceResponse.ResultOneofCase.Error:
								return Response<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case OrderIF_v1_setPriceResponse.ResultOneofCase.None:
							default:
								return Response<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'OrderIF_v1_setPrice'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>> multiPart(Sales.OrderManagement.IOrderIF_v1.OrderDTO order, Sales.OrderManagement.IOrderIF_v1.OrderItemDTO orderitem)
				{
					try
					{
						// fill grpc request
						var request = new OrderIF_v1_multiPartRequest();
						request.Order = order != null ? Sales.OrderManagement.IOrderIF_v1.OrderDTO.ToGrpc( order ) : null;
						request.Orderitem = orderitem != null ? Sales.OrderManagement.IOrderIF_v1.OrderItemDTO.ToGrpc( orderitem ) : null;

						// calling grpc client
						_client ??= new ProjectIF_v1.ProjectIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.multiPartAsync( request, new CallOptions(GrpClient.GetMetadata( "Sales.OrderManagement.OrderIF_v1.multiPart" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case OrderIF_v1_multiPartResponse.ResultOneofCase.Value:
								Sales.OrderManagement.IOrderIF_v1.OrderDTO value;
								value = grpc_response.Value != null ? Sales.OrderManagement.IOrderIF_v1.OrderDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Success( value );

							case OrderIF_v1_multiPartResponse.ResultOneofCase.Error:
								return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case OrderIF_v1_multiPartResponse.ResultOneofCase.None:
							default:
								return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'OrderIF_v1_multiPart'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			///getting the order based on id
				public static async Task<Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>> getOrder(string orderId)
				{
					try
					{
						// fill grpc request
						var request = new OrderIF_v1_getOrderRequest();
						request.OrderId = orderId;

						// calling grpc client
						_client ??= new ProjectIF_v1.ProjectIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.getOrderAsync( request, new CallOptions(GrpClient.GetMetadata( "Sales.OrderManagement.OrderIF_v1.getOrder" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case OrderIF_v1_getOrderResponse.ResultOneofCase.Value:
								Sales.OrderManagement.IOrderIF_v1.OrderDTO value;
								value = grpc_response.Value != null ? Sales.OrderManagement.IOrderIF_v1.OrderDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Success( value );

							case OrderIF_v1_getOrderResponse.ResultOneofCase.Error:
								return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case OrderIF_v1_getOrderResponse.ResultOneofCase.None:
							default:
								return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'OrderIF_v1_getOrder'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>> placeOrder(Sales.OrderManagement.IOrderIF_v1.OrderDTO order)
				{
					try
					{
						// fill grpc request
						var request = new OrderIF_v1_placeOrderRequest();
						request.Order = order != null ? Sales.OrderManagement.IOrderIF_v1.OrderDTO.ToGrpc( order ) : null;

						// calling grpc client
						_client ??= new ProjectIF_v1.ProjectIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.placeOrderAsync( request, new CallOptions(GrpClient.GetMetadata( "Sales.OrderManagement.OrderIF_v1.placeOrder" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case OrderIF_v1_placeOrderResponse.ResultOneofCase.Value:
								Sales.OrderManagement.IOrderIF_v1.OrderDTO value;
								value = grpc_response.Value != null ? Sales.OrderManagement.IOrderIF_v1.OrderDTO.FromGrpc( grpc_response.Value ) : null;
								return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Success( value );

							case OrderIF_v1_placeOrderResponse.ResultOneofCase.Error:
								return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case OrderIF_v1_placeOrderResponse.ResultOneofCase.None:
							default:
								return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'OrderIF_v1_placeOrder'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response> justOrder(string orderId)
				{
					try
					{
						// fill grpc request
						var request = new OrderIF_v1_justOrderRequest();
						request.OrderId = orderId;

						// calling grpc client
						_client ??= new ProjectIF_v1.ProjectIF_v1Client(GrpClient._channel);
						var grpc_response = await _client.justOrderAsync( request, new CallOptions(GrpClient.GetMetadata( "Sales.OrderManagement.OrderIF_v1.justOrder" ))).ResponseAsync;

						// fill response
						switch( grpc_response.ResultCase )
						{
							case OrderIF_v1_justOrderResponse.ResultOneofCase.Success:
								return Response.Success();

							case OrderIF_v1_justOrderResponse.ResultOneofCase.Error:
								return Response.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = grpc_response.Error.MessageText,
									AdditionalInformation = grpc_response.Error.AdditionalInformation,
								} );

							case OrderIF_v1_justOrderResponse.ResultOneofCase.None:
							default:
								return Response.Failure( new ServiceKit.Net.Error() {
									Status = grpc_response.Error.Status.FromGrpc(),
									MessageText = "Not handled reponse in GRPC client when calling 'OrderIF_v1_justOrder'",
								} );
						}
					}
					catch (RpcException ex)
					{
						return Response.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.FromGrpc(),
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			}
		}
	}
}
