
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Sales.OrderManagement;
using ServiceKit.Net;
using System.Globalization;
using System.Net;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;

namespace BFF.ApiClientKit
{
	/// public interface for Orders
	/// only for service-service communication
	static class Rest 
	{
		/// public interface for Orders
		/// only for service-service communication
		static class OrderIF
		{
			static class V1 
			{
				public static async Task<Response<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>> setPrice(Sales.OrderManagement.IOrderIF_v1.OrderItemDTO orderItem, decimal price)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/sales/ordermanagement/orderif/v1/None?price={price.ToString(CultureInfo.InvariantCulture)}" ) );

						// build content
						request.Content = new StringContent( JsonSerializer.Serialize<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>( orderItem ));

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "Sales.OrderManagement.OrderIF.V1.setPrice" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>();
							return Response<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>.Failure( error );
						}
						else
						{
							return Response<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'OrderIF_v1_setPrice'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>> multiPart(Sales.OrderManagement.IOrderIF_v1.OrderDTO order, Sales.OrderManagement.IOrderIF_v1.OrderItemDTO orderitem)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/sales/ordermanagement/orderif/v1/None" ) );

						// build multi part content
						MultipartFormDataContent multipartContent = new();
						multipartContent.Add( new StringContent( JsonSerializer.Serialize<Sales.OrderManagement.IOrderIF_v1.OrderDTO>( order ), Encoding.UTF8, "application/json" ), "_json_order", "_json_order.json" );
						multipartContent.Add( new StringContent( JsonSerializer.Serialize<Sales.OrderManagement.IOrderIF_v1.OrderItemDTO>( orderitem ), Encoding.UTF8, "application/json" ), "_json_orderitem", "_json_orderitem.json" );
					request.Content = multipartContent;

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "Sales.OrderManagement.OrderIF.V1.multiPart" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<Sales.OrderManagement.IOrderIF_v1.OrderDTO>();
							return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( error );
						}
						else
						{
							return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'OrderIF_v1_multiPart'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			///getting the order based on id
				public static async Task<Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>> getOrder(string orderId)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Get, WebUtility.UrlEncode( $"/sales/ordermanagement/orderif/v1/getorder/{orderId}" ) );

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "Sales.OrderManagement.OrderIF.V1.getOrder" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<Sales.OrderManagement.IOrderIF_v1.OrderDTO>();
							return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( error );
						}
						else
						{
							return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'OrderIF_v1_getOrder'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>> placeOrder(Sales.OrderManagement.IOrderIF_v1.OrderDTO order)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/sales/ordermanagement/orderif/v1/None" ) );

						// build content
						request.Content = new StringContent( JsonSerializer.Serialize<Sales.OrderManagement.IOrderIF_v1.OrderDTO>( order ));

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "Sales.OrderManagement.OrderIF.V1.placeOrder" );

						if (response.IsSuccessStatusCode)
						{
							var value = await response.Content.ReadFromJsonAsync<Sales.OrderManagement.IOrderIF_v1.OrderDTO>();
							return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Success( value );
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( error );
						}
						else
						{
							return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'OrderIF_v1_placeOrder'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response<Sales.OrderManagement.IOrderIF_v1.OrderDTO>.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

				public static async Task<Response> justOrder(string orderId)
				{
					try
					{
						// build request
						HttpRequestMessage request = new HttpRequestMessage( HttpMethod.Post, WebUtility.UrlEncode( $"/sales/ordermanagement/orderif/v1/justorder/{orderId}" ) );

						// call rest client 
						HttpResponseMessage response = await RestClient.Request( request, "Sales.OrderManagement.OrderIF.V1.justOrder" );

						if (response.IsSuccessStatusCode)
						{
							return Response.Success();
						}
						else if( response.Content != null )
						{
							var error = await response.Content.ReadFromJsonAsync<Error>();
							return Response.Failure( error );
						}
						else
						{
							return Response.Failure( new ServiceKit.Net.Error() {
								Status = response.StatusCode.FromHttp(),
								MessageText = "Not handled reponse in REST client when calling 'OrderIF_v1_justOrder'",
							} );
						}
					}
					catch (HttpRequestException ex)
					{
						return Response.Failure( new ServiceKit.Net.Error() {
							Status = ex.StatusCode.HasValue ? ex.StatusCode.Value.FromHttp() : Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
					catch (Exception ex)
					{
						return Response.Failure( new ServiceKit.Net.Error() {
							Status = Statuses.InternalError,
							MessageText = ex.Message,
							AdditionalInformation = ex.ToString(),
						} );
					}
				}

			}
		}
	}
}
