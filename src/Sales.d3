domain Sales {
    
    context OrderManagement {
        composite SalesDocument {
            humanKey:string
            partnerData:string
        }

        aggregate Order {

            enum OrderStatuses {
                Draft,
                Released,
                Finished,
                Canceled
            }

            entity Base {
                Id:string
                partionKey:string
            }

            valueobject OrderItem {
                productId:string
                productName:string
                quantity: number
                UnitPrice:number
                subTotalPrice:string
            }

            root entity OrderHeader inherits Base, SalesDocument {
                customerId:string
                orderingDate:date
                status:OrderStatuses
                totalPrice:number
                datelist:list[date]
                intlist:list[integer]
                datemap:map[string,date]
                intmap:map[string,integer]
                itemmap:map[string,OrderItem]
                items:list[OrderItem]
                item:OrderItem
            }
        }

        service OrderService {
            eventhandler handleOrderPlaced for event OrderIF.v1.OrderPlaced.v1

            getOrder( orderId: string ) : Order.OrderHeader
            placeOrder( order: Order.OrderHeader ) : Order.OrderHeader
        }

        @publish(grpc,rest)
        interface OrderIF version 1 {
            event OrderPlaced version 1 {
                orderId:string
            }

            enum OrderStatuses {
                Draft,
                Released,
                Finished,
                Canceled
            }

            dto OrderItemDTO {
                enum DeliveryStatuses {
                    NotDelivered,
                    PartiallyDelivered,
                    Delivered
                }

                productId:string
                productName:string
                quantity: number
                UnitPrice:number
                subTotalPrice:string
                deliveryStatus:DeliveryStatuses
            }

            dto OrderDTO {
                dto CustomerDataDTO {
                    customerId:string
                    customerName:string
                }

                orderingDate:string
                orderStatus:OrderStatuses
                totalPrice:number
                customerData:CustomerDataDTO
                items:list[OrderItemDTO]
            }

            getOrder( orderId: string ) : OrderDTO
            placeOrder( order: OrderDTO ) : OrderDTO
            justOrder( orderId: string )
        }

        @publish(grpc,rest)
        interface OrderIF version 2 {
            event OrderPlaced version 1 {
                orderId:string
            }

            event OrderPlaced version 2 {
                orderId:string
            }

            enum OrderStatuses {
                Draft,
                Released,
                Finished,
                Canceled
            }

            dto OrderItemDTO {
                enum DeliveryStatuses {
                    NotDelivered,
                    PartiallyDelivered,
                    Delivered
                }

                productId:string
                productName:string
                quantity: number
                UnitPrice:number
                subTotalPrice:string
                deliveryStatus:DeliveryStatuses
            }

            dto OrderDTO {
                dto CustomerDataDTO {
                    customerId:string
                    customerName:string
                }

                orderingDate:string
                orderStatus:OrderStatuses
                totalPrice:number
                customerData:CustomerDataDTO
                items:list[OrderItemDTO]
            }

            getOrder( orderId: string ) : OrderDTO
            placeOrder( order: OrderDTO ) : OrderDTO
            justOrder( orderId: string )
        }
    }

    context Cart {
    }

    context Tracking {
        enum TrackingStatuses
        {
            # Order has been placed but not yet processed
            Pending,

            # Order has been confirmed (e.g. payment received)
            Confirmed,

            # Order is being prepared in the warehouse
            Processing,

            # Package is ready and waiting for pickup by courier
            ReadyForPickup,

            # Package has been handed over to the shipping provider
            Shipped,

            # Package is in transit between locations
            InTransit,

            # Package is out for delivery to the customer
            OutForDelivery,

            # Package successfully delivered to the customer
            Delivered,

            # Delivery failed (e.g. customer was not available)
            FailedDelivery,

            # Package returned (by customer or shipping provider)
            Returned,

            # Order was cancelled (e.g. payment failed or user cancelled)
            Cancelled
        }

        aggregate OrderTrackingEntry {

            root entity TrackingEntry {
                TrackingStatus:TrackingStatuses
                statusDate:string
                orderId:string
            }
        }
    }

    context Payment {
    }
}